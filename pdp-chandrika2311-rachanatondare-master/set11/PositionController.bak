#lang racket

(require rackunit)
(require plot/utils)
(require 2htdp/image)
(require 2htdp/universe)
(require "Interfaces.rkt")
(require "DragContainer.rkt")
(require "extras.rkt")
(require "Model.rkt")

;; displays an outline rectangle with x and y positions of the particle
;; and velocities vx and vy

;; the rectange is draggable by clicking inside the handle
;; arrow keys up down, left right increase the position of the particle by +5
;; in respective directions

(provide PositionController%)

;; A position controller, handles and manipulates the position of the
;; particle using the arrow keys to move the particle in the x or
;; y direction.

;; a PositionController% is a (new PositionController% [model Model<%>]
;;                                                     [x Integer][y Integer])

;; x, y are optional

(define PositionController%
  (class* DragContainer% (Controller<%> HandleController<%>)
    
    ;;A model connected to position controller
    (inherit-field m) ;;Model<%>
    
    ;; selected by mouse or not 
    ;; if it is selected, then position of last button-down 
    (inherit-field selected? saved-mx saved-my);; Boolean Integer Integer
    
    ;;Position with repect to x an dy co-ordinates of the particle
    (inherit-field particle-x particle-y particle-vx particle-vy)
    ;; RealNum RealNum Integer Integer   
    
    ;; size of the controller
    (field [width 120][height 50]) ;; units in pixels
    
    (super-new)
    
    ;; after-key-event: ke -> void
    ;; GIVEN: a KeyEvent ke
    ;; EFFECT: if the controller is selected, sends position adjust value to the model
    ;;         according to given keyevent
    ;; EXAMPLES: (send p1 after-key-event "right") -> send the manipulated values
    ;;            5 0 to model
    ;; STRATEGY: cases on selected? and ke
    (define/override (after-key-event ke)
      (if selected?
          (cond
            [(key=? ke "up") (manage-position 0 -5)]
            [(key=? ke "down") (manage-position 0 5)]
            [(key=? ke "left") (manage-position -5 0)]
            [(key=? ke "right") (manage-position 5 0)])
          4567))
    
    
    ;; manage-position: Integer Integer: -> Void
    ;; GIVEN: the values to be incremented 
    ;; RETURNS: updated values of the partticle and updating the respective
    ;;          model
    ;; STRATEGY: Combine simpler functions
    (define (manage-position x1 y1)
      (send m execute-command
            (make-set-position (+ particle-x x1)
                               (+ particle-y y1))))
    
    ;; details-image:  -> Image
    ;; GIVEN:no arguments
    ;; RETURNS: the image that shows the position and the velocities
    ;;          of the particle
    (define/override (details-image)
      (above
       (text "Arrow keys change position" SMALL-TEXT-SIZE (text-color)
             (text (string-append
                    "X = " (real->decimal-string* particle-x 1 2)
                    "Y = " (real->decimal-string* particle-y 1 2))
                   TEXT-SIZE
                   (text-color))
             (text (string-append
                    "VX = " (real->decimal-string* particle-vx 1 1)
                    "VY = " (real->decimal-string* particle-vy 1 1))
                   TEXT-SIZE
                   (text-color)))))
    
    
    ;; text-color: -> String
    ;; GIVEN: no arguments
    ;; RETUNRS: color of the text based on selected?
    ;; STRATEGY: Cases on selected?
    (define (text-color)
      (if selected? SELECTED UNSELECTED))
    
    ;; bgrnd-image: Image -> Image
    ;; GIVEN: image
    ;; RETURNS: rectangle in background with updated size
    ;; STRATEGY: Combine simpler function
    (define/override (bgrnd-image the-details-image)
      (rectangle
       (max width (+ (image-width the-details-image)50))
       (max height (+ (image-height the-details-image)50))
       RECTANGLE-TYPE OUTER-REC))
    
    ;; model-after-button-down: Integer Integer -> void
    ;; GIVEN: a location
    ;; EFFECT: no change in model
    (define/override (model-after-button-down mx my)
      908)
    
    ;; model-after-button-up: Integer Integer -> void
    ;; GIVEN: a location
    ;; EFFECT: no change in model
    (define/override (model-after-button-up )
      1908)
    
    ;; model-after-drag: Integer Integer -> void
    ;; GIVEN: a location
    ;; EFFECT: no change in model
    (define/override (model-after-drag mx my)
      729)))




